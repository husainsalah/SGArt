// src/index.ts
import plugin from "tailwindcss/plugin.js";
import { parseIconSet } from "@iconify/utils";

// src/core.ts
import path from "path";

// node_modules/.pnpm/callsites@4.0.0/node_modules/callsites/index.js
function callsites() {
  const _prepareStackTrace = Error.prepareStackTrace;
  Error.prepareStackTrace = (_, stack2) => stack2;
  const stack = new Error().stack.slice(1);
  Error.prepareStackTrace = _prepareStackTrace;
  return stack;
}

// node_modules/.pnpm/caller-callsite@5.0.0/node_modules/caller-callsite/index.js
function callerCallsite({ depth = 0 } = {}) {
  const callers = [];
  const callerFileSet = /* @__PURE__ */ new Set();
  for (const callsite of callsites()) {
    const fileName = callsite.getFileName();
    const hasReceiver = callsite.getTypeName() !== null && fileName !== null;
    if (!callerFileSet.has(fileName)) {
      callerFileSet.add(fileName);
      callers.unshift(callsite);
    }
    if (hasReceiver) {
      return callers[depth];
    }
  }
}

// node_modules/.pnpm/caller-path@4.0.0/node_modules/caller-path/index.js
function callerpath({ depth = 0 } = {}) {
  const callsite = callerCallsite({ depth });
  return callsite && callsite.getFileName();
}

// src/core.ts
import fs from "fs";
import { getIconCSS, getIconData } from "@iconify/utils";
import { createRequire } from "module";
var req = false ? __require : createRequire(import.meta.url);
var localResolve = (cwd, id) => {
  try {
    const resolved = req.resolve(id, { paths: [cwd] });
    return resolved;
  } catch {
    return null;
  }
};
var getIconCollections = (include = "all") => {
  let cwd = process.cwd();
  if (cwd === "/") {
    const p = callerpath();
    if (p) {
      cwd = path.dirname(p);
    }
  }
  const pkgPath = localResolve(cwd, "@iconify/json/package.json");
  if (!pkgPath) {
    if (Array.isArray(include)) {
      return include.reduce((result, name) => {
        const jsonPath = localResolve(cwd, `@iconify-json/${name}/icons.json`);
        if (!jsonPath) {
          throw new Error(
            `Icon collection "${name}" not found. Please install @iconify-json/${name} or @iconify/json`
          );
        }
        return {
          ...result,
          [name]: req(jsonPath)
        };
      }, {});
    }
    return {};
  }
  const pkgDir = path.dirname(pkgPath);
  const files = fs.readdirSync(path.join(pkgDir, "json"));
  const collections = {};
  for (const file of files) {
    if (include === "all" || include.includes(file.replace(".json", ""))) {
      const json = req(path.join(pkgDir, "json", file));
      collections[json.prefix] = json;
    }
  }
  return collections;
};
var generateIconComponent = (data) => {
  const css = getIconCSS(data, {});
  const rules = {};
  css.replace(/^\s+([^:]+):\s*([^;]+);/gm, (_, prop, value) => {
    rules[prop] = value;
    return "";
  });
  return rules;
};

// src/index.ts
var iconsPlugin = ({
  collections
}) => {
  const components = {};
  for (const prefix of Object.keys(collections)) {
    const collection = collections[prefix];
    parseIconSet(collection, (name, data) => {
      if (!data)
        return;
      components[`${prefix}-${name}`] = generateIconComponent(data);
    });
  }
  return plugin(({ matchComponents }) => {
    matchComponents(
      {
        i: (value) => {
          if (typeof value === "string")
            return components[value];
          return value;
        }
      },
      {
        values: components
      }
    );
  });
};
export {
  getIconCollections,
  iconsPlugin
};
