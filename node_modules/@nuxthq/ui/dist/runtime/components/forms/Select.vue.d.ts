import type { PropType, ComputedRef } from 'vue';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: (ObjectConstructor | StringConstructor | NumberConstructor)[];
        default: string;
    };
    name: {
        type: StringConstructor;
        default: null;
    };
    placeholder: {
        type: StringConstructor;
        default: null;
    };
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: null;
    };
    loadingIcon: {
        type: StringConstructor;
        default: () => any;
    };
    leadingIcon: {
        type: StringConstructor;
        default: null;
    };
    trailingIcon: {
        type: StringConstructor;
        default: () => any;
    };
    trailing: {
        type: BooleanConstructor;
        default: boolean;
    };
    leading: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    padded: {
        type: BooleanConstructor;
        default: boolean;
    };
    options: {
        type: ArrayConstructor;
        default: () => never[];
    };
    size: {
        type: StringConstructor;
        default: () => any;
        validator(value: string): boolean;
    };
    color: {
        type: StringConstructor;
        default: () => any;
        validator(value: string): boolean;
    };
    variant: {
        type: StringConstructor;
        default: () => any;
        validator(value: string): boolean;
    };
    optionAttribute: {
        type: StringConstructor;
        default: string;
    };
    valueAttribute: {
        type: StringConstructor;
        default: string;
    };
    ui: {
        type: PropType<any>;
        default: () => any;
    };
}, {
    ui: ComputedRef<any>;
    normalizedOptionsWithPlaceholder: ComputedRef<{
        disabled?: boolean | undefined;
        children: {
            disabled?: boolean;
        }[];
    }[]>;
    normalizedValue: ComputedRef<any>;
    isLeading: ComputedRef<string | true>;
    isTrailing: ComputedRef<string | true | undefined>;
    selectClass: ComputedRef<any>;
    leadingIconName: ComputedRef<string | undefined>;
    leadingIconClass: ComputedRef<any>;
    leadingWrapperIconClass: ComputedRef<any>;
    trailingIconName: ComputedRef<string | undefined>;
    trailingIconClass: ComputedRef<any>;
    trailingWrapperIconClass: ComputedRef<any>;
    onInput: (event: InputEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: (ObjectConstructor | StringConstructor | NumberConstructor)[];
        default: string;
    };
    name: {
        type: StringConstructor;
        default: null;
    };
    placeholder: {
        type: StringConstructor;
        default: null;
    };
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: null;
    };
    loadingIcon: {
        type: StringConstructor;
        default: () => any;
    };
    leadingIcon: {
        type: StringConstructor;
        default: null;
    };
    trailingIcon: {
        type: StringConstructor;
        default: () => any;
    };
    trailing: {
        type: BooleanConstructor;
        default: boolean;
    };
    leading: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    padded: {
        type: BooleanConstructor;
        default: boolean;
    };
    options: {
        type: ArrayConstructor;
        default: () => never[];
    };
    size: {
        type: StringConstructor;
        default: () => any;
        validator(value: string): boolean;
    };
    color: {
        type: StringConstructor;
        default: () => any;
        validator(value: string): boolean;
    };
    variant: {
        type: StringConstructor;
        default: () => any;
        validator(value: string): boolean;
    };
    optionAttribute: {
        type: StringConstructor;
        default: string;
    };
    valueAttribute: {
        type: StringConstructor;
        default: string;
    };
    ui: {
        type: PropType<any>;
        default: () => any;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    icon: string;
    color: string;
    ui: any;
    name: string;
    options: unknown[];
    loading: boolean;
    disabled: boolean;
    size: string;
    variant: string;
    leadingIcon: string;
    trailingIcon: string;
    trailing: boolean;
    modelValue: string | number | Record<string, any>;
    placeholder: string;
    padded: boolean;
    loadingIcon: string;
    leading: boolean;
    required: boolean;
    optionAttribute: string;
    valueAttribute: string;
}, {}>;
export default _default;
